[2024-11-29 16:11:50,190] [INFO] [real_accelerator.py:219:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2024-11-29 16:11:51,460] [WARNING] [runner.py:215:fetch_hostfile] Unable to find hostfile, will proceed with training with local resources only.
[2024-11-29 16:11:51,460] [INFO] [runner.py:607:main] cmd = /home/nsatch/cs598aie/aie_spec_dec/ashley_new_code/decoding-speculative-decoding/venvs/spec_dec/bin/python3.9 -u -m deepspeed.launcher.launch --world_info=eyJsb2NhbGhvc3QiOiBbMF19 --master_addr=127.0.0.1 --master_port=29500 --enable_each_rank_log=None spec_decoding_final_param.py
[2024-11-29 16:11:52,559] [INFO] [real_accelerator.py:219:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2024-11-29 16:11:53,775] [INFO] [launch.py:146:main] WORLD INFO DICT: {'localhost': [0]}
[2024-11-29 16:11:53,775] [INFO] [launch.py:152:main] nnodes=1, num_local_procs=1, node_rank=0
[2024-11-29 16:11:53,775] [INFO] [launch.py:163:main] global_rank_mapping=defaultdict(<class 'list'>, {'localhost': [0]})
[2024-11-29 16:11:53,775] [INFO] [launch.py:164:main] dist_world_size=1
[2024-11-29 16:11:53,775] [INFO] [launch.py:168:main] Setting CUDA_VISIBLE_DEVICES=0
[2024-11-29 16:11:53,781] [INFO] [launch.py:256:main] process 423457 spawned with command: ['/home/nsatch/cs598aie/aie_spec_dec/ashley_new_code/decoding-speculative-decoding/venvs/spec_dec/bin/python3.9', '-u', 'spec_decoding_final_param.py', '--local_rank=0']
[2024-11-29 16:11:54,881] [INFO] [real_accelerator.py:219:get_accelerator] Setting ds_accelerator to cuda (auto detect)
1 0 0
[2024-11-29 16:11:56,973] [INFO] [logging.py:128:log_dist] [Rank -1] DeepSpeed info: version=0.15.4, git-hash=unknown, git-branch=unknown
[2024-11-29 16:11:56,974] [INFO] [logging.py:128:log_dist] [Rank -1] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
[2024-11-29 16:12:35,584] [INFO] [logging.py:128:log_dist] [Rank -1] DeepSpeed info: version=0.15.4, git-hash=unknown, git-branch=unknown
[2024-11-29 16:12:35,584] [INFO] [logging.py:128:log_dist] [Rank -1] quantize_bits = 8 mlp_extra_grouping = False, quantize_groups = 1
Current prompt:  We see a baby rinse a cup. she

correct predictions:  tensor([0., 0., 1., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753]], device='cuda:0')
torch.Size([1, 11])
Total matched:  tensor([1], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512]], device='cuda:0')
torch.Size([1, 12])
Total matched:  tensor([2], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264]], device='cuda:0')
torch.Size([1, 13])
Total matched:  tensor([3], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251]], device='cuda:0')
torch.Size([1, 14])
Total matched:  tensor([4], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845]], device='cuda:0')
torch.Size([1, 15])
Total matched:  tensor([5], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 1., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449]],
       device='cuda:0')
torch.Size([1, 16])
Total matched:  tensor([6], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264]],
       device='cuda:0')
torch.Size([1, 17])
Total matched:  tensor([7], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579]],
       device='cuda:0')
torch.Size([1, 18])
Total matched:  tensor([8], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631]], device='cuda:0')
torch.Size([1, 19])
Total matched:  tensor([9], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 1., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13]], device='cuda:0')
torch.Size([1, 20])
Total matched:  tensor([10], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077]], device='cuda:0')
torch.Size([1, 21])
Total matched:  tensor([11], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013]], device='cuda:0')
torch.Size([1, 22])
Total matched:  tensor([12], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374]], device='cuda:0')
torch.Size([1, 23])
Total matched:  tensor([13], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 1., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264]], device='cuda:0')
torch.Size([1, 24])
Total matched:  tensor([14], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697]],
       device='cuda:0')
torch.Size([1, 25])
Total matched:  tensor([15], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946]],
       device='cuda:0')
torch.Size([1, 26])
Total matched:  tensor([16], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([1., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  2
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13]],
       device='cuda:0', dtype=torch.int32)
torch.Size([1, 27])
Total matched:  tensor([18], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364]], device='cuda:0')
torch.Size([1, 28])
Total matched:  tensor([19], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753]], device='cuda:0')
torch.Size([1, 29])
Total matched:  tensor([20], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264]], device='cuda:0')
torch.Size([1, 30])
Total matched:  tensor([21], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369]], device='cuda:0')
torch.Size([1, 31])
Total matched:  tensor([22], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697]], device='cuda:0')
torch.Size([1, 32])
Total matched:  tensor([23], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828]], device='cuda:0')
torch.Size([1, 33])
Total matched:  tensor([24], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13]],
       device='cuda:0')
torch.Size([1, 34])
Total matched:  tensor([25], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001]],
       device='cuda:0')
torch.Size([1, 35])
Total matched:  tensor([26], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000]],
       device='cuda:0')
torch.Size([1, 36])
Total matched:  tensor([27], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058]], device='cuda:0')
torch.Size([1, 37])
Total matched:  tensor([28], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429]], device='cuda:0')
torch.Size([1, 38])
Total matched:  tensor([29], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252]], device='cuda:0')
torch.Size([1, 39])
Total matched:  tensor([30], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509]], device='cuda:0')
torch.Size([1, 40])
Total matched:  tensor([31], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986]], device='cuda:0')
torch.Size([1, 41])
Total matched:  tensor([32], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254]], device='cuda:0')
torch.Size([1, 42])
Total matched:  tensor([33], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254]],
       device='cuda:0')
torch.Size([1, 43])
Total matched:  tensor([34], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414]],
       device='cuda:0')
torch.Size([1, 44])
Total matched:  tensor([35], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772]],
       device='cuda:0')
torch.Size([1, 45])
Total matched:  tensor([36], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307]], device='cuda:0')
torch.Size([1, 46])
Total matched:  tensor([37], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12]], device='cuda:0')
torch.Size([1, 47])
Total matched:  tensor([38], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120]], device='cuda:0')
torch.Size([1, 48])
Total matched:  tensor([39], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15]], device='cuda:0')
torch.Size([1, 49])
Total matched:  tensor([40], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254]], device='cuda:0')
torch.Size([1, 50])
Total matched:  tensor([41], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480]], device='cuda:0')
torch.Size([1, 51])
Total matched:  tensor([42], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920]],
       device='cuda:0')
torch.Size([1, 52])
Total matched:  tensor([43], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587]],
       device='cuda:0')
torch.Size([1, 53])
Total matched:  tensor([44], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034]],
       device='cuda:0')
torch.Size([1, 54])
Total matched:  tensor([45], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539]], device='cuda:0')
torch.Size([1, 55])
Total matched:  tensor([46], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531]], device='cuda:0')
torch.Size([1, 56])
Total matched:  tensor([47], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539]], device='cuda:0')
torch.Size([1, 57])
Total matched:  tensor([48], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531]], device='cuda:0')
torch.Size([1, 58])
Total matched:  tensor([49], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509]], device='cuda:0')
torch.Size([1, 59])
Total matched:  tensor([50], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587]], device='cuda:0')
torch.Size([1, 60])
Total matched:  tensor([51], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034]],
       device='cuda:0')
torch.Size([1, 61])
Total matched:  tensor([52], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539]],
       device='cuda:0')
torch.Size([1, 62])
Total matched:  tensor([53], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531]],
       device='cuda:0')
torch.Size([1, 63])
Total matched:  tensor([54], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509]], device='cuda:0')
torch.Size([1, 64])
Total matched:  tensor([55], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895]], device='cuda:0')
torch.Size([1, 65])
Total matched:  tensor([56], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65]], device='cuda:0')
torch.Size([1, 66])
Total matched:  tensor([57], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887]], device='cuda:0')
torch.Size([1, 67])
Total matched:  tensor([58], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733]], device='cuda:0')
torch.Size([1, 68])
Total matched:  tensor([59], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672]], device='cuda:0')
torch.Size([1, 69])
Total matched:  tensor([60], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139]],
       device='cuda:0')
torch.Size([1, 70])
Total matched:  tensor([61], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733]],
       device='cuda:0')
torch.Size([1, 71])
Total matched:  tensor([62], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672]],
       device='cuda:0')
torch.Size([1, 72])
Total matched:  tensor([63], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563]], device='cuda:0')
torch.Size([1, 73])
Total matched:  tensor([64], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175]], device='cuda:0')
torch.Size([1, 74])
Total matched:  tensor([65], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571]], device='cuda:0')
torch.Size([1, 75])
Total matched:  tensor([66], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023]], device='cuda:0')
torch.Size([1, 76])
Total matched:  tensor([67], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555]], device='cuda:0')
torch.Size([1, 77])
Total matched:  tensor([68], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1]], device='cuda:0')
torch.Size([1, 78])
Total matched:  tensor([69], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 1., 0., 1., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001]],
       device='cuda:0')
torch.Size([1, 79])
Total matched:  tensor([70], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000]],
       device='cuda:0')
torch.Size([1, 80])
Total matched:  tensor([71], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163]],
       device='cuda:0')
torch.Size([1, 81])
Total matched:  tensor([72], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095]], device='cuda:0')
torch.Size([1, 82])
Total matched:  tensor([73], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527]], device='cuda:0')
torch.Size([1, 83])
Total matched:  tensor([74], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11]], device='cuda:0')
torch.Size([1, 84])
Total matched:  tensor([75], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422]], device='cuda:0')
torch.Size([1, 85])
Total matched:  tensor([76], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499]], device='cuda:0')
torch.Size([1, 86])
Total matched:  tensor([77], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 1., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207]], device='cuda:0')
torch.Size([1, 87])
Total matched:  tensor([78], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264]],
       device='cuda:0')
torch.Size([1, 88])
Total matched:  tensor([79], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748]],
       device='cuda:0')
torch.Size([1, 89])
Total matched:  tensor([80], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11]],
       device='cuda:0')
torch.Size([1, 90])
Total matched:  tensor([81], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499]], device='cuda:0')
torch.Size([1, 91])
Total matched:  tensor([82], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070]], device='cuda:0')
torch.Size([1, 92])
Total matched:  tensor([83], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534]], device='cuda:0')
torch.Size([1, 93])
Total matched:  tensor([84], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433]], device='cuda:0')
torch.Size([1, 94])
Total matched:  tensor([85], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13]], device='cuda:0')
torch.Size([1, 95])
Total matched:  tensor([86], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472]], device='cuda:0')
torch.Size([1, 96])
Total matched:  tensor([87], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070]],
       device='cuda:0')
torch.Size([1, 97])
Total matched:  tensor([88], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027]],
       device='cuda:0')
torch.Size([1, 98])
Total matched:  tensor([89], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309]],
       device='cuda:0')
torch.Size([1, 99])
Total matched:  tensor([90], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311]], device='cuda:0')
torch.Size([1, 100])
Total matched:  tensor([91], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095]], device='cuda:0')
torch.Size([1, 101])
Total matched:  tensor([92], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701]], device='cuda:0')
torch.Size([1, 102])
Total matched:  tensor([93], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716]], device='cuda:0')
torch.Size([1, 103])
Total matched:  tensor([94], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387]], device='cuda:0')
torch.Size([1, 104])
Total matched:  tensor([95], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264]], device='cuda:0')
torch.Size([1, 105])
Total matched:  tensor([96], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716]],
       device='cuda:0')
torch.Size([1, 106])
Total matched:  tensor([97], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13]],
       device='cuda:0')
torch.Size([1, 107])
Total matched:  tensor([98], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472]],
       device='cuda:0')
torch.Size([1, 108])
Total matched:  tensor([99], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070]], device='cuda:0')
torch.Size([1, 109])
Total matched:  tensor([100], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 1., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027]], device='cuda:0')
torch.Size([1, 110])
Total matched:  tensor([101], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 1., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309]], device='cuda:0')
torch.Size([1, 111])
Total matched:  tensor([102], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311]], device='cuda:0')
torch.Size([1, 112])
Total matched:  tensor([103], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 1., 0., 1., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095]], device='cuda:0')
torch.Size([1, 113])
Total matched:  tensor([104], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701]], device='cuda:0')
torch.Size([1, 114])
Total matched:  tensor([105], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 1., 0., 1., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716]],
       device='cuda:0')
torch.Size([1, 115])
Total matched:  tensor([106], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304]],
       device='cuda:0')
torch.Size([1, 116])
Total matched:  tensor([107], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294]],
       device='cuda:0')
torch.Size([1, 117])
Total matched:  tensor([108], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 1., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13]], device='cuda:0')
torch.Size([1, 118])
Total matched:  tensor([109], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472]], device='cuda:0')
torch.Size([1, 119])
Total matched:  tensor([110], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070]], device='cuda:0')
torch.Size([1, 120])
Total matched:  tensor([111], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027]], device='cuda:0')
torch.Size([1, 121])
Total matched:  tensor([112], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 1., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309]], device='cuda:0')
torch.Size([1, 122])
Total matched:  tensor([113], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311]], device='cuda:0')
torch.Size([1, 123])
Total matched:  tensor([114], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095]],
       device='cuda:0')
torch.Size([1, 124])
Total matched:  tensor([115], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701]],
       device='cuda:0')
torch.Size([1, 125])
Total matched:  tensor([116], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 1., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716]],
       device='cuda:0')
torch.Size([1, 126])
Total matched:  tensor([117], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139]], device='cuda:0')
torch.Size([1, 127])
Total matched:  tensor([118], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 1., 0., 1., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709]], device='cuda:0')
torch.Size([1, 128])
Total matched:  tensor([119], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 1., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13]], device='cuda:0')
torch.Size([1, 129])
Total matched:  tensor([120], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 1., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628]], device='cuda:0')
torch.Size([1, 130])
Total matched:  tensor([121], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499]], device='cuda:0')
torch.Size([1, 131])
Total matched:  tensor([122], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070]], device='cuda:0')
torch.Size([1, 132])
Total matched:  tensor([123], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 1., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027]],
       device='cuda:0')
torch.Size([1, 133])
Total matched:  tensor([124], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309]],
       device='cuda:0')
torch.Size([1, 134])
Total matched:  tensor([125], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311]],
       device='cuda:0')
torch.Size([1, 135])
Total matched:  tensor([126], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095]], device='cuda:0')
torch.Size([1, 136])
Total matched:  tensor([127], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701]], device='cuda:0')
torch.Size([1, 137])
Total matched:  tensor([128], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716]], device='cuda:0')
torch.Size([1, 138])
Total matched:  tensor([129], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387]], device='cuda:0')
torch.Size([1, 139])
Total matched:  tensor([130], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782]], device='cuda:0')
torch.Size([1, 140])
Total matched:  tensor([131], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627]], device='cuda:0')
torch.Size([1, 141])
Total matched:  tensor([132], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673]],
       device='cuda:0')
torch.Size([1, 142])
Total matched:  tensor([133], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527]],
       device='cuda:0')
torch.Size([1, 143])
Total matched:  tensor([134], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682]],
       device='cuda:0')
torch.Size([1, 144])
Total matched:  tensor([135], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695]], device='cuda:0')
torch.Size([1, 145])
Total matched:  tensor([136], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 1., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574]], device='cuda:0')
torch.Size([1, 146])
Total matched:  tensor([137], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 1., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311]], device='cuda:0')
torch.Size([1, 147])
Total matched:  tensor([138], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 1., 0., 1., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656]], device='cuda:0')
torch.Size([1, 148])
Total matched:  tensor([139], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 1., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13]], device='cuda:0')
torch.Size([1, 149])
Total matched:  tensor([140], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628]], device='cuda:0')
torch.Size([1, 150])
Total matched:  tensor([141], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358]],
       device='cuda:0')
torch.Size([1, 151])
Total matched:  tensor([142], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 1., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344]],
       device='cuda:0')
torch.Size([1, 152])
Total matched:  tensor([143], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539]],
       device='cuda:0')
torch.Size([1, 153])
Total matched:  tensor([144], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133]], device='cuda:0')
torch.Size([1, 154])
Total matched:  tensor([145], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311]], device='cuda:0')
torch.Size([1, 155])
Total matched:  tensor([146], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046]], device='cuda:0')
torch.Size([1, 156])
Total matched:  tensor([147], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430]], device='cuda:0')
torch.Size([1, 157])
Total matched:  tensor([148], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584]], device='cuda:0')
torch.Size([1, 158])
Total matched:  tensor([149], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288]], device='cuda:0')
torch.Size([1, 159])
Total matched:  tensor([150], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349]],
       device='cuda:0')
torch.Size([1, 160])
Total matched:  tensor([151], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388]],
       device='cuda:0')
torch.Size([1, 161])
Total matched:  tensor([152], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323]],
       device='cuda:0')
torch.Size([1, 162])
Total matched:  tensor([153], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009]], device='cuda:0')
torch.Size([1, 163])
Total matched:  tensor([154], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806]], device='cuda:0')
torch.Size([1, 164])
Total matched:  tensor([155], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057]], device='cuda:0')
torch.Size([1, 165])
Total matched:  tensor([156], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980]], device='cuda:0')
torch.Size([1, 166])
Total matched:  tensor([157], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387]], device='cuda:0')
torch.Size([1, 167])
Total matched:  tensor([158], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980]], device='cuda:0')
torch.Size([1, 168])
Total matched:  tensor([159], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13]],
       device='cuda:0')
torch.Size([1, 169])
Total matched:  tensor([160], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030]],
       device='cuda:0')
torch.Size([1, 170])
Total matched:  tensor([161], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358]],
       device='cuda:0')
torch.Size([1, 171])
Total matched:  tensor([162], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656]], device='cuda:0')
torch.Size([1, 172])
Total matched:  tensor([163], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781]], device='cuda:0')
torch.Size([1, 173])
Total matched:  tensor([164], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584]], device='cuda:0')
torch.Size([1, 174])
Total matched:  tensor([165], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649]], device='cuda:0')
torch.Size([1, 175])
Total matched:  tensor([166], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656]], device='cuda:0')
torch.Size([1, 176])
Total matched:  tensor([167], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264]], device='cuda:0')
torch.Size([1, 177])
Total matched:  tensor([168], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731]],
       device='cuda:0')
torch.Size([1, 178])
Total matched:  tensor([169], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683]],
       device='cuda:0')
torch.Size([1, 179])
Total matched:  tensor([170], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315]],
       device='cuda:0')
torch.Size([1, 180])
Total matched:  tensor([171], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917]], device='cuda:0')
torch.Size([1, 181])
Total matched:  tensor([172], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057]], device='cuda:0')
torch.Size([1, 182])
Total matched:  tensor([173], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911]], device='cuda:0')
torch.Size([1, 183])
Total matched:  tensor([174], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922]], device='cuda:0')
torch.Size([1, 184])
Total matched:  tensor([175], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697]], device='cuda:0')
torch.Size([1, 185])
Total matched:  tensor([176], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323]], device='cuda:0')
torch.Size([1, 186])
Total matched:  tensor([177], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323,   6975]],
       device='cuda:0')
torch.Size([1, 187])
Total matched:  tensor([178], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323,   6975,    311]],
       device='cuda:0')
torch.Size([1, 188])
Total matched:  tensor([179], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323,   6975,    311,    387]],
       device='cuda:0')
torch.Size([1, 189])
Total matched:  tensor([180], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323,   6975,    311,    387,
          11782]], device='cuda:0')
torch.Size([1, 190])
Total matched:  tensor([181], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323,   6975,    311,    387,
          11782,    627]], device='cuda:0')
torch.Size([1, 191])
Total matched:  tensor([182], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323,   6975,    311,    387,
          11782,    627,     40]], device='cuda:0')
torch.Size([1, 192])
Total matched:  tensor([183], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323,   6975,    311,    387,
          11782,    627,     40,   1781]], device='cuda:0')
torch.Size([1, 193])
Total matched:  tensor([184], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323,   6975,    311,    387,
          11782,    627,     40,   1781,    584]], device='cuda:0')
torch.Size([1, 194])
Total matched:  tensor([185], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323,   6975,    311,    387,
          11782,    627,     40,   1781,    584,    649]], device='cuda:0')
torch.Size([1, 195])
Total matched:  tensor([186], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 1., 1.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323,   6975,    311,    387,
          11782,    627,     40,   1781,    584,    649,    656]],
       device='cuda:0')
torch.Size([1, 196])
Total matched:  tensor([187], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323,   6975,    311,    387,
          11782,    627,     40,   1781,    584,    649,    656,    264]],
       device='cuda:0')
torch.Size([1, 197])
Total matched:  tensor([188], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323,   6975,    311,    387,
          11782,    627,     40,   1781,    584,    649,    656,    264,   2731]],
       device='cuda:0')
torch.Size([1, 198])
Total matched:  tensor([189], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323,   6975,    311,    387,
          11782,    627,     40,   1781,    584,    649,    656,    264,   2731,
           2683]], device='cuda:0')
torch.Size([1, 199])
Total matched:  tensor([190], device='cuda:0', dtype=torch.int32)

correct predictions:  tensor([0., 0., 0., 0., 0., 0., 0.], device='cuda:0')
Matched tokens:  1
New inputs:  tensor([[128000,   1687,   1518,    264,   8945,  74341,    264,  10747,     13,
           1364,    753,  12512,    264,   4251,  15845,    449,    264,   2579,
          15631,     13,   1077,   7013,    374,    264,   2697,  46946,     13,
           1364,    753,    264,  19369,   2697,   3828,     13, 128001, 128000,
           1058,    429,   2252,  34509,  13986,   3254,   3254,  25414,   1772,
            307,     12,   5120,     15,   3254,  39480,  54920,   2587,  43034,
           2539,   9531,   2539,   9531,  34509,   2587,  43034,   2539,   9531,
          34509,  12895,     65,  26887,  11733,  20672,   7139,  11733,  20672,
          24563,   3175,  25571,   5023,  14555,      1, 128001, 128000,   1163,
           3095,    527,     11,    422,    499,   3207,    264,   2748,     11,
            499,   4070,  10534,    433,     13,   1472,   4070,   1027,   3309,
            311,   1095,    701,   1716,    387,    264,   1716,     13,   1472,
           4070,   1027,   3309,    311,   1095,    701,   1716,   1304,  21294,
             13,   1472,   4070,   1027,   3309,    311,   1095,    701,   1716,
           3139,    709,     13,   1628,    499,   4070,   1027,   3309,    311,
           1095,    701,   1716,    387,  11782,    627,   9673,    527,    682,
           1695,   2574,    311,    656,     13,   1628,    358,   4344,    539,
           2133,    311,  18046,    430,    584,   1288,   2349,   3388,    323,
           3009,  20806,   1057,   6980,    387,   6980,     13,   2030,    358,
            656,   1781,    584,    649,    656,    264,   2731,   2683,    315,
          12917,   1057,   2911,    922,  28697,    323,   6975,    311,    387,
          11782,    627,     40,   1781,    584,    649,    656,    264,   2731,
           2683,    315]], device='cuda:0')
torch.Size([1, 200])
Total matched:  tensor([191], device='cuda:0', dtype=torch.int32)
Draft successes:  1
Final output:  We see a baby rinse a cup. she’s wearing a white shirt with a red bow. her hair is a little messy. she’s a cute little girl.class="post-template-default single single-post postid-1100 single-format-standard custom-background full-width full-width-template custom-background full-width-template wpb-js-composer js-composer-fullwidth vc_responsive"Chances are, if you’re a parent, you’ve experienced it. You’ve been told to let your child be a child. You’ve been told to let your child make mistakes. You’ve been told to let your child grow up. And you’ve been told to let your child be creative.
These are all good things to do. And I’m not going to argue that we should change course and stop letting our kids be kids. But I do think we can do a better job of teaching our children about creativity and learning to be creative.
I think we can do a better job of
torch.Size([1, 200])

[2024-11-29 16:12:52,840] [INFO] [launch.py:351:main] Process 423457 exits successfully.
